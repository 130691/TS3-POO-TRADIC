# Abstracción: Creación de una clase abstracta para el sistema de pago
from abc import ABC, abstractmethod

class MetodoPago(ABC):
    @abstractmethod
    def realizar_pago(self, monto):
        pass

# Subclases concretas
class TarjetaCredito(MetodoPago):
    def realizar_pago(self, monto):
        print(f"Se ha realizado un pago de ${monto} con tarjeta de crédito.")

class PayPal(MetodoPago):
    def realizar_pago(self, monto):
        print(f"Se ha realizado un pago de ${monto} con PayPal.")




# Encapsulación: Clase para representar una motocicleta con atributos privados
class Motocicleta:
    def __init__(self, marca, modelo):
        self.__marca = marca
        self.__modelo = modelo

    def obtener_info(self):
        return f"Motocicleta {self.__marca} {self.__modelo}"

# Uso del ejemplo
mi_motocicleta = Motocicleta("Honda", "CBR 500R")
print(mi_motocicleta.obtener_info())



# Herencia: Clase para representar una motocicleta eléctrica que hereda de Motocicleta

class MotocicletaElectrica(Motocicleta):
    def __init__(self, marca, modelo, autonomia):
        super().__init__(marca, modelo)
        self.__autonomia = autonomia

    def obtener_info(self):
        return f"Motocicleta eléctrica {self._Motocicleta__marca} {self._Motocicleta__modelo} (Autonomía: {self.__autonomia} km)"

# Uso del ejemplo
mi_motocicleta_electrica = MotocicletaElectrica("Zero", "SR/F", 150)
print(mi_motocicleta_electrica.obtener_info())



# Polimorfismo: Función para procesar el pago independientemente del método de pago

def procesar_pago(metodo, monto):
    metodo.realizar_pago(monto)

# Uso del ejemplo
tarjeta = TarjetaCredito()
paypal = PayPal()
procesar_pago(tarjeta, 100)
procesar_pago(paypal, 50)

